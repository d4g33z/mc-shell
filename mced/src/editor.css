/* General layout for the entire page */
html, body {
    height: 100vh; /* Use 100% of the viewport height */
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f0f0f0;
    color: #333;
    overflow: hidden; /* Prevent the body itself from scrolling */
}

/* --- The Main Two-Panel Grid Layout --- */
.editor-layout {
    display: grid;
    /* This is the key: it defines two columns.
       The first is 300px wide. The second takes up the remaining space (1fr). */
    grid-template-columns: 300px 1fr;
    height: 100%;
    gap: 8px; /* A small gap between the panels */
    padding: 8px;
    box-sizing: border-box;
}

/* --- Left Panel: Power Library --- */
#power-library-panel {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    overflow-y: auto; /* Allow scrolling if the list of powers is long */
    min-width: 0;
}

#power-library-panel h2 {
    padding: 12px 16px;
    margin: 0;
    border-bottom: 1px solid #e0e0e0;
    font-size: 16px;
}

#power-list {
    padding: 8px;
    flex-grow: 1; /* Allow the list to fill the available space */
}

/* --- Right Panel: Main Content --- */
#main-content-panel {
    display: flex;
    flex-direction: column; /* Stack the toolbar, editor, and preview vertically */
    gap: 8px;
    min-width: 0;
}

#controls {
    flex-shrink: 0; /* Prevent the control bar from shrinking */
    background: #ffffff;
    padding: 8px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    flex-wrap: wrap; /* Allow buttons to wrap on smaller screens */
    gap: 8px;
}

#controls button {
    padding: 6px 12px;
    border: 1px solid #ccc;
    background-color: #f7f7f7;
    border-radius: 4px;
    cursor: pointer;
}

#controls button:hover {
    background-color: #e9e9e9;
    border-color: #bbb;
}

#editor-preview-pane {
    flex-grow: 1; /* This pane will take up the remaining vertical space */
    display: flex;
    flex-direction: column; /* To stack Blockly and the code display */
    border: 1px solid #ccc;
    border-radius: 8px;
    overflow: hidden; /* Hide anything that spills out */
    background-color: #ffffff;
    min-height: 0; /* Add this for better flexbox behavior in some browsers */
}

#blocklyDiv {
    flex-grow: 1; /* Blockly editor takes up most of the space in this pane */
    position: relative; /* Needed for Blockly's UI elements */
}
/* In src/editor.css */

#code-container {
    height: 250px;
    flex-shrink: 0;
    margin: 0;
    overflow: auto; /* For vertical scrolling */
    background-color: #272822;
    color: #f8f8f2;
    border-top: 1px solid #444;
    font-family: 'Fira Code', 'Dank Mono', monospace;
    font-size: 14px;
    line-height: 1.5;
    padding: 1em;
    box-sizing: border-box;

    /* --- CORRECTED WRAPPING RULES --- */

    /* 1. Primary rule: Preserve whitespace but wrap lines. */
    white-space: pre-wrap;

    /* 2. Preferred rule for breaking long words that would otherwise overflow. */
    /* It will only break a word if the word itself is too long to fit on a line. */
    overflow-wrap: break-word;

    /* 3. A fallback/additional rule for compatibility. `break-all` is more aggressive */
    /* but `break-word` is often a good companion to overflow-wrap. */
    word-break: break-word;
}

/* Prism's own styles will handle the token colors */
/* PrismJS theme might override background. Ensure it fits your design. */
/* The 'okaidia' theme has a dark background which works well. */

/* --- CORRECTED ALPINE.JS TRANSITION STYLES --- */

/* Base style for the element that will be transitioned.
   This defines the duration and easing-function for the animation. */
.modal-content {
    /* ... your other modal styles (position, background, padding, etc.) ... */
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* State for the element BEFORE it enters the DOM.
  It starts invisible and slightly scaled down.
*/
.x-transition-enter-start {
    opacity: 0;
    transform: translate(-50%, -48%) scale(0.95);
}

/*
  State for the element AFTER it has finished entering.
  It's fully visible and at its normal scale.
*/
.x-transition-enter-end {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

/*
  State for the element BEFORE it begins to leave the DOM.
  It's fully visible and at its normal scale.
*/
.x-transition-leave-start {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

/*
  State for the element AFTER it has finished leaving.
  It's invisible and scaled down.
*/
.x-transition-leave-end {
    opacity: 0;
    transform: translate(-50%, -48%) scale(0.95);
}

/* We now use Alpine's built-in classes.
   The :enter, :enter-start, :enter-end, :leave, :leave-start, :leave-end
   classes are automatically added and removed by Alpine.js when an element
   with x-show and x-transition is shown or hidden.
*/
[x-transition\:enter] {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
[x-transition\:enter-start] {
    opacity: 0;
    transform: translate(-50%, -48%) scale(0.95);
}
[x-transition\:enter-end] {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}
[x-transition\:leave] {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
[x-transition\:leave-start] {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}
[x-transition\:leave-end] {
    opacity: 0;
    transform: translate(-50%, -48%) scale(0.95);
}