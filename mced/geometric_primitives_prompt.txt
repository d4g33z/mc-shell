I now have a lower level library of digital geometric functions to generate coordinate lists for several geometric primitives. I would now like to use those functions in the methods of classes that inherit MCActionBase, to implement the Python code generated by the blocks in the mc-ed application, e.g.  self.action_implementer.create_cube, which is called within the run_program method of the generated BlocklyProgramRunner class.



I am going to supply the new lower level library and I want you to generate:



- a new class MCActions that inherits MCActionBase and has an un-implemented stub method of approriate signature for each digital geometric, suitable for calling from within the run_program method body of BlocklyProgramRunner

e.g.



generate_digital_cube_coordinates(center: tuple[float, float, float], side_length: float, rotation_matrix: np.ndarray,inner_offset_factor: float = 0.0)

determines the method:

MCAction.create_cube(center: Vec3, side_length:float, rotation_matrix: Matrix3, inner_offset_factor:float)



This requires implementing a Matrix3 object, similar to the Vec3 object which can then be manipulated to pass arguments to the lower level primitives



- you must also generate the required Blockly block definitions and Python code generators to add each geometric primitive in the low level library to the Blockly editor.



Note that is will also be neccessary to generate a minecraft_matrix_3D block of type 3DMatrix similar to the minecraft_vector_3D block of type 3DVector, and the Python generator block for it to create the necessary code representation of the new Matrix3 object from the data input by the mc-ed user via block manipulation in two ways:



1. direct input of the nine coordinates into 9 input fields arranged like a standard matrix



2. as a set of Euler angles, similar to the following snippet:





If you need to create any new Python classes (like Matrix3) or any blocks other than the ones corresponding to the actions implemented by the lower level geometric primitives, please do so.



Here is the lower level of geometric primitives:



```
LIBRARY CODE...

```



The geometric primitives have names like generate_digital_cube_coordinates and so forth. Please do not generate any blocks action_implementer class methods for the helper functions unless necessary.