# .github/workflows/python-ci.yml

name: CI Build and Test

# --- Triggers ---
# Runs on pushes and pull requests to the main and develop branches.
on:
  push:
    branches: [ "main", "devel" ]
  pull_request:
    branches: [ "main", "devel" ]

# --- Jobs ---
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      # Step 1: Check out the repository's code
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up the specific Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # --- NEW: Step 3: Set up Node.js ---
      # This step is required to run npm commands.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a Long-Term Support (LTS) version of Node.js
          cache: 'npm' # This will cache your npm dependencies

      # Step 4: Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Step 5: Cache Python dependencies
      - name: Load cached Python venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Step 6: Install Python dependencies if cache wasn't found
      - name: Install Python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Step 7: Install the project itself (mc-shell)
      - name: Install project
        run: poetry install --no-interaction

      # --- NEW: Step 8: Install Node.js dependencies ---
      # This reads package-lock.json and installs packages like Parcel, htmx, etc.
      - name: Install npm dependencies
        working-directory: ./mced
        run: npm ci

      # --- NEW: Step 9: Build Frontend Assets ---
      # This runs your "build" script from package.json, which generates blocks,
      # the toolbox, and bundles the final app into mcshell/data/app/.
      - name: Build frontend application
        working-directory: ./mced
        run: npm run build

      # Step 10: Run the unit tests
      # This now runs AFTER the frontend has been built.
      - name: Run tests
        run: poetry run python -m unittest discover
